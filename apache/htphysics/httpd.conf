# vim:set syntax=apache:

# If you need to test changes to htcommon.conf, temporarily change this
# include to your repo, i.e. /home/www/docs/staging/4432/apache/htcommon.conf
Include /export/data/web/apache/htcommon.conf

# Load Shibboleth module for Apache2
# - this also requires SHIB_HOME and LD_LIBARRY_PATH set in /etc/apache2/envvars
LoadModule mod_shib /usr/local/lib/shibboleth/mod_shib_22.so
#ShibSchemaDir /usr/local/share/xml/shibboleth
<Files *.sso>
  SetHandler shib-handler
</Files>

User htphysics
Group htphysics
ServerAdmin net@physics.umn.edu
DirectoryIndex index.html index.html.var
LogLevel info

# Production
<ifDefine !STAGING>
    PerlSwitches -w -I/export/data/web/lib -I/export/data/sysadm/lib
    MaxClients 240
</ifDefine>

# Staging
<ifDefine STAGING>
    PerlSwitches -w
    MaxClients 240
</ifDefine>

<Perl>
    use Apache2::PerlSections;
    use Apache2::ServerUtil;
    use File::stat;
    use User::pwent;

    # Allows for dumping perl section config
    $Apache2::PerlSections::Save = 1;

    my $s = Apache2::PerlSections->server;

    my $staging = Apache2::ServerUtil::exists_config_define('STAGING') ? 1 : 0;
    my $rootdir = $staging ? '/home/www/docs/staging' : '/export/data/web';
    my $port = '443';
    my $instance = 'htphysics';

    if ($staging) {
        # Determine port from config file name
        $0 =~ m|${rootdir}/(\d+)|;
        ${port} = $1
            or die "Failed to find port from config file name $0";
        $rootdir .= "/${port}";

        # Get owner of staging site
        my $owner = getpwuid(stat("${rootdir}")->uid)->name
            or die "Failed to find owner of file '${rootdir}'";

        # Set instance from owner
        ${instance} = "ht${owner}";

        # Add sysadm lib directory to perl lib path
        if (-e "${rootdir}-lib") {
            unshift(@INC, "${rootdir}-lib");
        }
        else {
            unshift(@INC, "/export/data/sysadm/lib");
        }

        # Add web lib directory to perl lib path
        if (-e "${rootdir}/lib") {
            unshift(@INC, "${rootdir}/lib");
        }
        else {
            die "Couldn't find web lib directory ${rootdir}/lib";
        }

        # Limits staging site to one child thread
        push(@PerlConfig, qq[
            MaxClients 1
            KeepAlive Off
        ]);
    }

    $s->dir_config('SiteName', $instance);

    # Common config directives for staging and production
    my $common_config = qq[

    ServerName www.physics.umn.edu
    ServerAdmin net\@physics.umn.edu

    Alias /media /home/www/docs/media
    <Directory /home/www/docs/media>
        Order allow,deny
        Allow from all
    </Directory>

    RedirectMatch   ^/groups/(.+)                       http://groups.physics.umn.edu/\$1
    RedirectMatch   ^/~(.+)                             http://homepages.spa.umn.edu/~\$1
    RedirectMatch   ^/maxima                            http://groups.physics.umn.edu/cosmology/
    RedirectMatch   ^/maxipol                           http://groups.physics.umn.edu/cosmology/maxipol/
    RedirectMatch   ^/cosmology(.*)                     http://groups.physics.umn.edu/cosmology/

    #Redirects for the upgrade:
    RedirectMatch   ^/directory/(.+)                    /people/\$1
    RedirectMatch   ^/calendar/(.*)                     /events/calendar/\$1

    DocumentRoot ${rootdir}/www/
    PerlModule HTML::Mason::ApacheHandler
    PerlPostConfigRequire "${rootdir}/apache/htphysics/mason-physics.pl"

    ];

    push(@PerlConfig, qq[

ErrorLog /var/log/httpd/${instance}-generic-error.log
CustomLog /var/log/httpd/${instance}-generic-access.log combined
#SSLSessionCache dbm:/var/run/ssl_scache-${instance}
#SSLMutex file:/var/run/ssl_mutex-${instance}
SSLSessionCache shm:/var/run/ssl_scache-${instance}(128000)
SSLMutex sem

Listen ${port}

<VirtualHost *:${port}>
    $common_config
    SSLEngine On
    SSLProtocol All -SSLv2 -SSLv3
    SSLHonorCipherOrder On
    SSLCipherSuite ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS

    ErrorLog /var/log/httpd/${instance}-ssl-error.log
    CustomLog /var/log/httpd/${instance}-ssl-access.log ssl_combined
    RewriteLog /var/log/httpd/${instance}-rewrite.log

    ShibConfig ${rootdir}/apache/shibboleth/shibboleth2.xml
    #ShibConfig /usr/local/etc/shibboleth/shibboleth2.xml
    Alias /shibboleth /usr/local/share/doc/shibboleth/
    <Location /shibboleth>
        Allow from all
    </location>

    <Location /shibsecure>
      AuthType shibboleth
      #ShibRequireSession On
      ShibRequestSetting requireSession 1
      require valid-user
    </Location>

    RewriteEngine On
    RewriteLogLevel 5
    RewriteCond     %{HTTP_HOST}   ^physics\.umn\.edu [NC]
    RewriteRule     ^(.*)$          https://www.physics.umn.edu/$1 [L,R=302]
</VirtualHost>

<Directory ${rootdir}/www>
    RewriteEngine On
]);
if ($staging) { push(@PerlConfig, qq[
    RewriteRule ^\$|^(.*/)\$ https://%{SERVER_NAME}:${port}/\$1index.html
    RewriteCond     %{HTTP_HOST}   ^physics\.umn\.edu [NC]
    RewriteRule     ^(.*)$          https://www.physics.umn.edu/$1 [L,R=302]
]) }
else { push(@PerlConfig, qq[
    RewriteRule ^\$|^(.*/)\$ /\$1index.html
]) }
push(@PerlConfig, qq[
    RewriteRule ^(.*/)?\\.(.+)/ - [F,L]

    SetHandler perl-script
    PerlHandler UMPhysDev::Mason
    Order allow,deny
]);

# Setup http auth on staging instances
if ($staging) { push(@PerlConfig, qq[
    Satisfy Any
    # Allow iPAQ to bypass auth when connected to "UofM Simple"
    Allow from 192.168.153
    AuthName 'Web Staging server login'
    AuthType Basic
    AuthBasicProvider ldap
    AuthLDAPGroupAttribute memberUid
    AuthLDAPGroupAttributeIsDN off
    AuthLDAPURL 'ldaps://ldap.spa.umn.edu ldap2.spa.umn.edu ldap3.spa.umn.edu/ou=People, dc=physics,dc=umn,dc=edu?uid?sub?(objectclass=*)'
    require ldap-group cn=web,ou=Group,dc=physics,dc=umn,dc=edu
    require ldap-group cn=webstaging,ou=Group,dc=physics,dc=umn,dc=edu
</Directory>
]) }
else { push(@PerlConfig, qq[
    Allow from all
</Directory>
]) }

# Setup port 80 htphysics site
unless ($staging) { push(@PerlConfig, qq[

Listen 80
<VirtualHost *:80>
    $common_config

    ErrorLog /var/log/httpd/${instance}-error.log
    CustomLog /var/log/httpd/${instance}-access.log combined

</VirtualHost>
]) }
</Perl>
<Perl>
# Dump generated perl section config
use Apache2::PerlSections;
print Apache2::PerlSections->dump;
</Perl>
