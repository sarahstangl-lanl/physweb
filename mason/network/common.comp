<%doc>
        vim:set syntax=mason:
</%doc>
<%perl>

sub choose_value { 
   while(my $val = shift) {
      if (defined $$val) {
        return $$val;
      }
   }
}

sub error_block
{
    my $display = shift;
    my $name = shift;
    return '<span class="errorarrow" id="error_indicator_'.$name.'"style="background: red; color: black;'. ($display ? "display: inline;" : "display: none;") 
            . '"><img src="/images/a_ar_left_black.gif" border="none">&nbsp;</span>'; 
}

# input_text draws an input text area.
# input_text(name, value, attributes)
#   name - html form name, and id is input_$name
#   value - a list .. the first defined value is used as default value of box.
#   attributes - {'foo'=>'blah'} becomes foo="blah" in the html element.
sub input_text{
   my $name = shift;
   my $dbvalues = shift;
   my $attributes = shift;
   my $default = shift;
   my %args = $m->request_args;
   my $value = choose_value( \$args{"in_$name"}, \$dbvalues->{$name}, \$default, "");
   my $attr = "";
   foreach my $key (keys %$attributes) {
       $attr .= "$key=\"".$attributes->{$key}."\" ";
   }
   my $errblock = error_block((defined $args{'err_key'} && $args{'err_key'} eq $name) ? 1 : 0, $name);
   $value = $m->interp->apply_escapes( $value, 'h' );
   my $retstr = "<input id=\"input_$name\" type=\"text\" name=\"$name\" value=\"$value\" $attr>$errblock";
}

sub input_textarea{
   my $name = shift;
   my $dbvalues = shift;
   my $attributes = shift;
   my $default = shift;
   my %args = $m->request_args;
   my $value = choose_value( \$args{"in_$name"}, \$dbvalues->{$name}, \$default, "");
   my $attr = "";
   foreach my $key (keys %$attributes) {
       $attr .= "$key=\"".$attributes->{$key}."\" ";
   }
   my $errblock = error_block((defined $args{'err_key'} && $args{'err_key'} eq $name) ? 1 : 0, $name);
   $value = $m->interp->apply_escapes( $value, 'h' );
   my $retstr = "$errblock<textarea id=\"input_$name\" name=\"$name\" $attr>$value</textarea>";
}


# input_checkbox(name, defaults, attributes)
#  name - html form name and id is input_$name
#  defaults - first defined value in this list is used as the current setting
#  attributes - {'foo'=>'blah'} becomes foo="blah" in the html element.
sub input_checkbox {
    my $name = shift;
    my $dbvalues = shift;
    my $attributes = shift;
    my %args = $m->request_args;
    my $value = choose_value( \$args{"in_$name"}, \$dbvalues->{$name}, "");
    my $attr = "";
    foreach my $key (keys %$attributes) {
        $attr .= "$key=\"". $attributes->{$key}."\" ";
    }
    my $errblock = error_block((defined $args{'err_key'} && $args{'err_key'} eq $name) ? 1 : 0, $name);
    return "<input id=\"input_$name\" type=\"checkbox\" name=\"$name\" ". (($value eq "1") ? "CHECKED" : "")." value=\"1\" $attr>$errblock";
}



# input_select(name, defaults, options, attributes)
#   name - html form name, and id is input_$name
#   defaults - a list .. the first defined value is selected.
#   options - 
#       input_select expects as the 3rd argument a ref to an array of either scalar values, or
#       another ref to an array where 0 is the key and 1 is the printed value. IE:
#       (['foo'=>'Foo'], ['blah'=>"Blah thing"]) or
#       ('foo', 'blah')
#   attributes - {'foo'=>'blah'} becomes foo="blah" in the html element.
sub input_select{
   my $name = shift;
   my $defaults = shift;
   my $options = shift;
   my $attributes = shift;
   my $attr = "";
   foreach my $key (keys %$attributes) {
       $attr .= "$key=\"".$attributes->{$key}."\" ";
   }
   #my %args = $r->args();
   my %args = $m->request_args;

   #print "<PRE>";
   #print Dumper(\%args);
   #print "DEBUG: $name select choice: ";
   #my $value = choose_value( \$args{"in_$name"}, \$dbvalues->{$name}, \$default, "");
   #my $value = choose_value(\$defaults->{$name}, \$args{"in_$name"}, "");
   my $value = choose_value(\$args{"in_$name"}, \$defaults->{$name}, "");
   #print "$value\n";
   #print "</PRE>";
   my $str = "<SELECT name=\"$name\" id=\"$name\" $attr>";
   my $errblock = error_block((defined $args{'err_key'} && $args{'err_key'} eq $name) ? 1 : 0, $name);
   foreach my $option (@$options) {
      if(ref($option)) {
        $str .= "<OPTION ". ($$option[0] eq $value ? "SELECTED" :"") ." value=\"". $$option[0]."\">".$$option[1] ."</OPTION>\n";
      }
      else {
        $str .= "<OPTION ". ($option eq $value ? "SELECTED" : "") . " value=\"$option\">$option</OPTION>\n";
      }
   }
   $str .= "</SELECT>$errblock";
   return $str;
}
</%perl>
