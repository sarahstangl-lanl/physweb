<%once>
use Data::Dumper;
my @conf;
# Default-files' names (files like index.html that are shown if you use
# the URL of a directory):
@conf::defaultfiles = ('index.html', 'index.htm', 'index.php');
# Here you can decide which files will be listed, depending on the
# files' suffix. Comment in the appropriate line:
# List all files:
#@conf::file_suffixes = ();
# Only list typical web files:
@conf::file_suffixes = ('html');
# Only list typical multimedia files:
#@conf::file_suffixes = ('mp3', 'wav', 'avi', 'wmv', 'mpg', 'mpeg');
# Only list files that have no suffix:
#@conf::file_suffixes = ('');
# Default is @conf::includefiles = (), which means 'include everything':
@conf::includefiles = ();
# Comment in the next line to include only the default files (like index.html)
# and nothing else:
#@conf::includefiles = ('*/');

# Do not include these files/directories:
@conf::excludefiles = ('/include/*', '/config/*', '/auth/*', '*old*', '*/error*',
    '*/delete_*', '*/edit_*', '*/upload*', '/classes/*', '/courses/*', '*/column.html',
    '/frame/*', '/resources/gradprogress/*', '/*gradebooks/*', '/resources/classes/tascheduling/*',
    '/grad/physics/application/*.html', '/imagedb*', '/groups/*', '/resources/myphys/groupmgmt/*',
    '/resources/keyring/*', '/resources/facultyvote/*', '/resources/admin/*', '/people/faux*',
    '/people/*edit*', '/people/unpublished*', '/people/list_all*', '/people/inactive*', '/resources/camera*',
    '/resources/send_demoreq*', '/resources/computing/download*', '/resources/shopdb/*', '/resources/foyer/*');
# To exclude one directory use this:
#@conf::excludefiles = ('/secret/*');
# To exclude more than one directory use this:
#@conf::excludefiles = ('/secret/*', '/anothersecret/*');
# Additionally, the string ~~NOSITEMAP~~ before the title in any page will exclude it.

# How should the files be linked? URL, TITLE, UPDATED, SIZE, DATE, and TIME
# will be replaced by actual values:
$conf::link =<<EOF;
<a href="URL" class="sitemap_link">TITLE</a> UPDATED <span class="sitemap_info">SIZE kB, DATE at TIME</span>
EOF

# How to mark files that were recently modified:
$conf::updatedtag = '<strong>updated</strong> ';
# Mark those files modified more recently than $conf::update_hours hours (0 = option off):
$conf::update_hours = 3*24;

# How to mark files that were recently modified:
$conf::updatedtag = '<strong>updated</strong> ';
# Mark those files modified more recently than $conf::update_hours hours (0 = option off):
$conf::update_hours = 3*24;
# Date format. %Y = year, %m = month, %d = day
# On a Unix system use 'man strftime' to get a list of all
# possible options.
$conf::date_format = "%B %d, %Y";
# Time format. %H = hour, %M = minute, %S = second.
$conf::time_format = "%l:%M%p";
# http://search.cpan.org/~drolsky/DateTime-0.38/lib/DateTime.pm#strftime_Specifiers

# Ignore symbolic links?
$conf::ignore_links = 1;

# maximum length of the link, taken from <title>:
$conf::max_title_length = 200;

$conf::baseurl = "";
my $html = "";

# Enable '*' as wildcard in @conf::excludefiles and @conf::includefiles
foreach my $pat (@conf::excludefiles, @conf::includefiles) {
        $pat =~ s#\*#.*?#g;
}

</%once>

<%method tree>
<%perl>
    $conf::basedir = $ARGS{'basedir'};
    my $file;
    sub add_slash($)
    {
       my $file = shift;
       if ( -d $file && $file !~ m/\/$/ ) {
          return "/";
       } else {
          return "";
       }
    }
    sub is_defaultfile($) 
    {
       my $file = shift;
       if ( grep(/^\Q$file\E$/, @conf::defaultfiles) ) {
         return 1;
       } else {
         return 0;
       }
    }
    # Return 1 if a file/dir should be included in the generated tree,
    # return 0 otherwise.
    sub include_file($$)
    {
            my $f = shift;
            my $dir = shift;

            # Ignore uninteresting suffixes for files:
            if( -f $f ) {
                    my ($suffix) = ($f =~ m/.*\.(.*?)$/);
                    #if( !$suffix ) {
                    #       return 0;
                    #}
                    if( scalar(@conf::file_suffixes) > 0 ) {
                            if( !grep(/^$suffix$/, @conf::file_suffixes) ) {
                                    return 0;
                            }
                    }
            }

            my $check_path = $f;
            $check_path = $dir.$f;
            # Add slash so that '/dirname/*' can match:
            if( -d $check_path ) {
                    $check_path = $check_path."/";
            }
            $check_path =~ s/$conf::basedir//;
            # pretend that $conf::basedir is the root directory:
            if( $check_path !~ m/^\// ) {
                    $check_path = "/".$check_path;
            }

            my $include_file = 1;
            # possibly include only certain files:
            if( scalar(@conf::includefiles) >= 1 ) {
                    $include_file = 0;
                    foreach my $inc_pat (@conf::includefiles) {
                            if( $check_path =~ m/^$inc_pat$/ ) {
                                    $include_file = 1;
                                    last;
                            }
                    }
            }
            # possibly exclude certain files:
            if( $include_file && scalar(@conf::excludefiles) >= 1 ) {
                    foreach my $inc_pat (@conf::excludefiles) {
                            if( $check_path =~ m/^$inc_pat$/ ) {
                                    $include_file = 0;
                                    last;
                            }
                    }
            }
            # debug: warn "$include_file <= $dir, $f\n";
            return $include_file;
    } # sub include_file
    # Take a directory and a file and return the file and its path,
    sub make_full_path($$)
    {
            my $dir = shift;
            my $file = shift;
            my $full_path;
            $full_path = $dir."/".$file;
            $full_path =~ s/\/\//\//og;
            return $full_path;
    }
    # Remove HTML and HTML special characters from a string. This way one can secureley
    # use tree.pl to make a sitemap of other people's pages that might contain
    # javascript in their title's (or even filenames!):
    sub treecleanup($)
    {
            my $str = shift;
            $str =~ s/&(?!((\w{2,7})|(#\d{2,3}));)/&amp;/igs;
            $str =~ s/</&lt;/igs;
            $str =~ s/>/&gt;/igs;
            return $str;
    }

    # Build an XHTML link to file.
    sub get_file_link($)
    {
            my $file = shift;
            my $link = $conf::link;

            # maybe it doesn't make sense to link a directory without a default file:
            my $default_file = has_defaultfile($file);
            if( !$conf::link_all_directories && -d $file && !$default_file ) {
                    $link = $conf::nolink;
            }

            # adding a "/" to the end of the directory if necessary saves the user one redirect:
            $file .= add_slash($file);

            # Set the correct filename so we can later load the file to get the title:
            if( -d $file && $default_file ) {
                    $file = $file.$default_file;
            }

            # URL:
            my $url = $file;        # no need to escape because of my_uri_escape()
            $url =~ s/$conf::basedir(\/|\\)?//;
            my ($short_url) = ($url =~ m/.*\/(.*?)(\.html)*$/);
            if($short_url eq "index") { # If its a default file, use the directory name instead 
               ($short_url) = ($url =~ m#([^/]+)/[^/]*#);
#               $html .= "$url  --> $short_url<BR>";
            }
            $link =~ s/URL/$conf::baseurl.my_uri_escape($url);/igse;

            my $title = treecleanup(get_file_title($file, ucfirst($short_url)));
            $link =~ s/TITLE/$title/gs;

            # Recently modified?:
            my $update;
            if( is_it_modified($file) ) {
                    $update = $conf::updatedtag;
            } else {
                    $update = "";
            }
            $link =~ s/UPDATED/$update/gs;

            # Date and time:
            my $date = get_file_date($file);
            $link =~ s/DATE/$date/gs;
            my $time = get_file_time($file);
            $link =~ s/TIME/$time/gs;

            # Size:
            $link =~ s/SIZE/getsize($file)/gse;

            $link =~ s/\r|\n//igs;
            return $link;
    }
    # Return the name of the default file if this directory has
    # one, return undef otherwise.
    sub has_defaultfile($)
    {
            my $dir = shift;
            foreach my $def_file (@conf::defaultfiles) {
                    if( -e "$dir/$def_file" ) {
                            return $def_file;
                    }
            }
            return;
    }

    # Escape some special characters in URLs. This function escapes each part
    # of the path (i.e. parts delimited by "/") on its own.
    sub my_uri_escape($)
    {
            my $str = shift;
            my $ends_in_string = ($str =~ m/\/$/);
            my @parts = split("/", $str);
            foreach my $part (@parts) {
                    $part = $m->interp->apply_escapes($part, 'u');
                    #$part = CGI::escape($part);
            }
            $str = join("/", @parts);
            if( $ends_in_string ) {
                    $str .= "/";
            }
            return $str;
    }
    # Load part of a file until </title> is reached (to save time for big files).
    sub load_part($)
    {
            my $file = shift;
            my $string = "";
            return '' if( -B $file );
            open(INPUT, "<$file") ||
                    (warn "Error: $0: Cannot open '$file': $!" and return "");
            while(<INPUT>) {
                    $string .= $_;
                    last if( $_ =~ m#<%method title>.*?</%method>#is );
            }
            close(INPUT);
            return $string;
    }


    # Get the <title>...</title> of a file or return its filename
    # if it has no title.
    sub get_file_title($$)
    {
            my $file = shift;
            my $short_url = shift;
            # Title or URL, if title is not available:
            if( -d $file ) {
                    return $short_url;
            }
            my $file_content_part = load_part($file);
            my ($title) = ($file_content_part =~ m#<%method title>(.*?)</%method>#is);
            if( (!$title) or $title =~ /^\s*\%/  ) {  #HACK ALERT: if theres % leading the title, assume its a mason code block
                    $title = $short_url;
                    $title = "/" if( ! $title );
            }
            if( length($title) > $conf::max_title_length ) {
                    $title = substr($title, 0, $conf::max_title_length) . "...";
            }
            return $title;
    }
    sub is_nomap($)
    {
        my $file = shift;
        if( -f $file) {
            my $file_content_part = load_part($file);
            my ($nomap) = ($file_content_part =~ /\~\~NOSITEMAP\~\~/is);
            if($nomap) {
              return 1;
            }
        }
        return 0;
    }
    # Check if file was modified recently. Return 1 or 0.
    sub is_it_modified($)
    {
            my $filename = shift;
            #my ($mtime) = (stat($filename))[9];
            my $modstat = stat($filename);
            if( $conf::update_hours && ((time() - $modstat->mtime) < ($conf::update_hours*60*60)) ) {
                    return 1;
            } else {
                    return 0;
            }
    }
    # Get the filesize in KB. For files < 1 KB return 1, unless the file
    # is 0 bytes.
    sub getsize($)
    {
            my $file = shift;
            my $size = int((-s $file)/1024);
            if( $size == 0 && ! (-s $file == 0) ) {
                    $size = 1;
            }
            return $size;
    }


    # Get formatted date of a file's last modification.
    sub get_file_date($)
    {
            my $filename = shift;
            my $foo = stat($filename);
            #print "DEBUG: $filename". POSIX::strftime($conf::date_format, CORE::localtime($foo->mtime)) . "<BR>";
            #print Dumper(stat($filename));
            #print "<BR><BR>";

            #return POSIX::strftime($conf::date_format, localtime($mtime));
            return POSIX::strftime($conf::date_format, CORE::localtime($foo->mtime));
    }

    # Get formatted time of a file's last modification.
    sub get_file_time($)
    {
            my $filename = shift;
            #my $date_time = (stat($filename))[9];
            my $date_time = stat($filename);
            return POSIX::strftime($conf::time_format, CORE::localtime($date_time->mtime));
    }

    # Get formatted current date.
    sub get_now_date()
    {
            return POSIX::strftime($conf::date_format, CORE::localtime(time()));
    }

    sub crawl($)
    {
            my $dir = shift;
            $dir = $dir.add_slash($dir);
            my $file;
            my $html = "";

            $main::level++;
            chdir($dir) or (warn "Cannot chdir to '$dir': $!" and return);
            opendir(DIR, $dir) or (warn "Cannot open '$dir': $!" and return);
            my @contents = readdir(DIR);
            closedir(DIR);

            # Links may be ignored completely:
            if( $conf::ignore_links ) {
                    @contents = grep { not -l } @contents;
            }
            # No hidden files and ".." directories:
            @contents = grep {!/^\./} @contents;

            # Get directories:
            my @dirs = grep {-d} @contents;
            # Get files:
            my @files = grep {-f} @contents;

            my $prefix = get_prefix();

            $html .= "$prefix<li class=\"sitemap".$main::level."\">".get_file_link($dir)."\n";
            $html .= "$prefix<ul class=\"sitemap".$main::level."\">\n";

            # Go through all files in this directory except default files. Sorting
            # by filename does not make much sense, but at least the order is defined then:
            foreach my $f (sort(@files)) {
                    my ($suffix) = ($f =~ m/.*\.(.*?)$/);
                    next if ( is_defaultfile($f) );
                    next if ( ! include_file($f, $dir) );
                    next if ( is_nomap($f));
                    $file = make_full_path($dir, $f);
                    $html .= "$prefix<li  class=\"sitemap".$main::level."\">".get_file_link($file)."</li>\n";
            }

            # Go through all directories in this directory:
            foreach my $d (sort(@dirs)) {
                    next if ( ! include_file($d, $dir) );
                    my $this_dir = make_full_path($dir, $d);
                    $html .= crawl($this_dir);
            }

            $html .= "$prefix</ul>\n";
            $html .= "$prefix</li>\n";

            $main::level--;
            return $html;
    }

    #################################################
    #
    #  Main code


    # Get a string for indenting the XHTML source, according
    # to the depth of the nested list.
    sub get_prefix()
    {
            my $prefix = "\t" x $main::level;
            return $prefix;
    }


    my $dir = $conf::basedir.add_slash($conf::basedir);
    chdir($dir) or (warn "Cannot chdir to '$dir' : $!" and return);
    opendir(DIR, $dir) or (warn "Cannot open '$dir': $!" and return);
    my @contents = readdir(DIR);
    closedir(DIR);
    if( $conf::ignore_links ) {
       @contents = grep { not -l } @contents;
    }
    @contents = grep { !/^\./} @contents;
    my @dirs = grep {-d} @contents;
    my @files = grep {-f} @contents;
    $html .= "<ul class=\"sitemap1\">";
    # Go through all directories in this directory:
    foreach my $d (sort(@dirs)) {
            next if ( ! include_file($d, $dir) );
            my $this_dir = make_full_path($dir, $d);
            $html .= crawl($this_dir);
    }
    chdir($dir) or (warn "Cannot chdir to '$dir': $!" and return);
    foreach my $f (sort(@files)) {
       my ($suffix) = ($f =~ m/.*\.(.*?)$/);
       next if ( is_defaultfile($f) );
       next if ( ! include_file($f, $dir) );
       next if ( is_nomap($f));
       $file = make_full_path($dir, $f);
       $html .= "<li>".get_file_link($file)."</li>\n";
    }
    $html .= "</ul>";
    my $gentime = POSIX::strftime($conf::time_format, CORE::localtime());
    my $gendate = POSIX::strftime($conf::date_format, CORE::localtime());
    $html .= "<div class=\"sitemap_generated\">Sitemap Generated on $gendate at $gentime</div>";
    return($html);

</%perl>
</%method>

<%args>
$dir=>'';
$url=>'';
$basedir=>'.';
$purge=>'';
</%args>

% my $html = $m->cache->get("sitemap$dir:$url:$basedir");
% if (!defined($html) or $purge) {
%   $html = $m->comp("SELF:tree", dir=>$dir, url=>$url, level=>1, basedir=>$basedir);
%   $m->cache->set("sitemap$dir:$url:$basedir", $html, '1 hour', busy_lock=>'10 sec');
% }

<div class="sitemap">
      <% $html %>
</div>
%# vim:set syntax=mason: 
